# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with an ID"
interface Node {
    "The id of the object."
    id: ID!
}

"The ParseObject interface type is used as a base type for the auto generated object types."
interface ParseObject {
    ACL: ACL!
    "This is the date in which the object was created."
    createdAt: Date!
    "This is the object id."
    objectId: ID!
    "This is the date in which the object was las updated."
    updatedAt: Date!
}

"The SchemaField interface type is used as a base type for the different supported fields of an object class schema."
interface SchemaField {
    "This is the field name."
    name: String!
}

"Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments"
union ArrayResult = Card | Element | Role | User

"Current access control list of the current object."
type ACL {
    "Public access control list."
    public: PublicACL
    "Access control list for roles."
    roles: [RoleACL!]
    "Access control list for users."
    users: [UserACL!]
}

"The Card object type is used in operations that involve outputting objects of Card class."
type Card implements Node & ParseObject {
    ACL: ACL!
    "This is the date in which the object was created."
    createdAt: Date!
    "The ID of an object"
    id: ID!
    "This is the object image."
    image: FileInfo!
    "This is the object name."
    name: String!
    "This is the object id."
    objectId: ID!
    "This is the date in which the object was las updated."
    updatedAt: Date!
}

"A connection to a list of items."
type CardConnection {
    "This is the total matched objecs count that is returned when the count flag is set."
    count: Int!
    "A list of edges."
    edges: [CardEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type CardEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Card
}

"The Class type is used to return the information about an object class."
type Class {
    "This is the name of the object class."
    name: String!
    "These are the schema's fields of the object class."
    schemaFields: [SchemaField!]!
}

type CreateCardPayload {
    "This is the created object."
    card: Card!
    clientMutationId: String
}

type CreateClassPayload {
    "This is the created class."
    class: Class!
    clientMutationId: String
}

type CreateFilePayload {
    clientMutationId: String
    "This is the created file info."
    fileInfo: FileInfo!
}

type CreateRolePayload {
    clientMutationId: String
    "This is the created object."
    role: Role!
}

type CreateUserPayload {
    clientMutationId: String
    "This is the created object."
    user: User!
}

type DeleteCardPayload {
    "This is the deleted object."
    card: Card!
    clientMutationId: String
}

type DeleteClassPayload {
    "This is the deleted class."
    class: Class!
    clientMutationId: String
}

type DeleteRolePayload {
    clientMutationId: String
    "This is the deleted object."
    role: Role!
}

type DeleteUserPayload {
    clientMutationId: String
    "This is the deleted object."
    user: User!
}

"The Element object type is used to return array items' value."
type Element {
    "Return the value of the element in the array"
    value: Any!
}

"The FileInfo object type is used to return the information about files."
type FileInfo {
    "This is the file name."
    name: String!
    "This is the url in which the file can be downloaded."
    url: String!
}

"The GeoPoint object type is used to return the information about geo point fields."
type GeoPoint {
    "This is the latitude."
    latitude: Float!
    "This is the longitude."
    longitude: Float!
}

type LogInPayload {
    clientMutationId: String
    "This is the existing user that was logged in and returned as a viewer."
    viewer: Viewer!
}

type LogInWithPayload {
    clientMutationId: String
    "This is the new user that was created, signed up and returned as a viewer."
    viewer: Viewer!
}

type LogOutPayload {
    clientMutationId: String
    "It's always true."
    ok: Boolean!
}

"Mutation is the top level type for mutations."
type Mutation {
    "The createCard mutation can be used to create a new object of the Card class."
    createCard(input: CreateCardInput!): CreateCardPayload
    "The createClass mutation can be used to create the schema for a new object class."
    createClass(input: CreateClassInput!): CreateClassPayload
    "The createFile mutation can be used to create and upload a new file."
    createFile(input: CreateFileInput!): CreateFilePayload
    "The createRole mutation can be used to create a new object of the Role class."
    createRole(input: CreateRoleInput!): CreateRolePayload
    "The createUser mutation can be used to create a new object of the User class."
    createUser(input: CreateUserInput!): CreateUserPayload
    "The deleteCard mutation can be used to delete an object of the Card class."
    deleteCard(input: DeleteCardInput!): DeleteCardPayload
    "The deleteClass mutation can be used to delete an existing object class."
    deleteClass(input: DeleteClassInput!): DeleteClassPayload
    "The deleteRole mutation can be used to delete an object of the Role class."
    deleteRole(input: DeleteRoleInput!): DeleteRolePayload
    "The deleteUser mutation can be used to delete an object of the User class."
    deleteUser(input: DeleteUserInput!): DeleteUserPayload
    "The logIn mutation can be used to log in an existing user."
    logIn(input: LogInInput!): LogInPayload
    "The logInWith mutation can be used to signup, login user with 3rd party authentication system. This mutation create a user if the authData do not correspond to an existing one."
    logInWith(input: LogInWithInput!): LogInWithPayload
    "The logOut mutation can be used to log out an existing user."
    logOut(input: LogOutInput!): LogOutPayload
    "The resetPassword mutation can be used to reset the password of an existing user."
    resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
    "The sendVerificationEmail mutation can be used to send the verification email again."
    sendVerificationEmail(input: SendVerificationEmailInput!): SendVerificationEmailPayload
    "The signUp mutation can be used to create and sign up a new user."
    signUp(input: SignUpInput!): SignUpPayload
    "The updateCard mutation can be used to update an object of the Card class."
    updateCard(input: UpdateCardInput!): UpdateCardPayload
    "The updateClass mutation can be used to update the schema for an existing object class."
    updateClass(input: UpdateClassInput!): UpdateClassPayload
    "The updateRole mutation can be used to update an object of the Role class."
    updateRole(input: UpdateRoleInput!): UpdateRolePayload
    "The updateUser mutation can be used to update an object of the User class."
    updateUser(input: UpdateUserInput!): UpdateUserPayload
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Allow to manage public rights."
type PublicACL {
    "Allow anyone to read the current object."
    read: Boolean
    "Allow anyone to write on the current object."
    write: Boolean
}

"Query is the top level type for queries."
type Query {
    "The card query can be used to get an object of the Card class by its id."
    card(
        "This is the object id. You can use either the global or the object id."
        id: ID!,
        "The read options for the query to be executed."
        options: ReadOptionsInput
    ): Card!
    "The cards query can be used to find objects of the Card class."
    cards(
        after: String,
        before: String,
        first: Int,
        last: Int,
        "The read options for the query to be executed."
        options: ReadOptionsInput,
        "The fields to be used when sorting the data fetched."
        order: [CardOrder!],
        "This is the number of objects that must be skipped to return."
        skip: Int,
        "These are the conditions that the objects need to match in order to be found."
        where: CardWhereInput
    ): CardConnection!
    "The class query can be used to retrieve an existing object class."
    class(
        "This is the name of the object class."
        name: String!
    ): Class!
    "The classes query can be used to retrieve the existing object classes."
    classes: [Class!]!
    "The health query can be used to check if the server is up and running."
    health: Boolean!
    "Fetches an object given its ID"
    node(
        "The ID of an object"
        id: ID!
    ): Node
    "The role query can be used to get an object of the Role class by its id."
    role(
        "This is the object id. You can use either the global or the object id."
        id: ID!,
        "The read options for the query to be executed."
        options: ReadOptionsInput
    ): Role!
    "The roles query can be used to find objects of the Role class."
    roles(
        after: String,
        before: String,
        first: Int,
        last: Int,
        "The read options for the query to be executed."
        options: ReadOptionsInput,
        "The fields to be used when sorting the data fetched."
        order: [RoleOrder!],
        "This is the number of objects that must be skipped to return."
        skip: Int,
        "These are the conditions that the objects need to match in order to be found."
        where: RoleWhereInput
    ): RoleConnection!
    "The user query can be used to get an object of the User class by its id."
    user(
        "This is the object id. You can use either the global or the object id."
        id: ID!,
        "The read options for the query to be executed."
        options: ReadOptionsInput
    ): User!
    "The users query can be used to find objects of the User class."
    users(
        after: String,
        before: String,
        first: Int,
        last: Int,
        "The read options for the query to be executed."
        options: ReadOptionsInput,
        "The fields to be used when sorting the data fetched."
        order: [UserOrder!],
        "This is the number of objects that must be skipped to return."
        skip: Int,
        "These are the conditions that the objects need to match in order to be found."
        where: UserWhereInput
    ): UserConnection!
    "The viewer query can be used to return the current user data."
    viewer: Viewer!
}

type ResetPasswordPayload {
    clientMutationId: String
    "It's always true."
    ok: Boolean!
}

"The Role object type is used in operations that involve outputting objects of Role class."
type Role implements Node & ParseObject {
    ACL: ACL!
    "This is the date in which the object was created."
    createdAt: Date!
    "The ID of an object"
    id: ID!
    "This is the object name."
    name: String
    "This is the object id."
    objectId: ID!
    "This is the object roles."
    roles(
        after: String,
        before: String,
        first: Int,
        last: Int,
        "The read options for the query to be executed."
        options: ReadOptionsInput,
        "The fields to be used when sorting the data fetched."
        order: [RoleOrder!],
        "This is the number of objects that must be skipped to return."
        skip: Int,
        "These are the conditions that the objects need to match in order to be found."
        where: RoleWhereInput
    ): RoleConnection!
    "This is the date in which the object was las updated."
    updatedAt: Date!
    "This is the object users."
    users(
        after: String,
        before: String,
        first: Int,
        last: Int,
        "The read options for the query to be executed."
        options: ReadOptionsInput,
        "The fields to be used when sorting the data fetched."
        order: [UserOrder!],
        "This is the number of objects that must be skipped to return."
        skip: Int,
        "These are the conditions that the objects need to match in order to be found."
        where: UserWhereInput
    ): UserConnection!
}

"Allow to manage roles in ACL. If read and write are null the role have read and write rights."
type RoleACL {
    "Allow users who are members of the role to read the current object."
    read: Boolean!
    "Name of the targetted Role."
    roleName: ID!
    "Allow users who are members of the role to write on the current object."
    write: Boolean!
}

"A connection to a list of items."
type RoleConnection {
    "This is the total matched objecs count that is returned when the count flag is set."
    count: Int!
    "A list of edges."
    edges: [RoleEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type RoleEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Role
}

"The SchemaACLField is used to return information of an ACL field."
type SchemaACLField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaArrayField is used to return information of an Array field."
type SchemaArrayField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaBooleanField is used to return information of a Boolean field."
type SchemaBooleanField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaBytesField is used to return information of a Bytes field."
type SchemaBytesField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaDateField is used to return information of a Date field."
type SchemaDateField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaFileField is used to return information of a File field."
type SchemaFileField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaGeoPointField is used to return information of a Geo Point field."
type SchemaGeoPointField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaNumberField is used to return information of a Number field."
type SchemaNumberField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaObjectField is used to return information of an Object field."
type SchemaObjectField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaPointerField is used to return information of a Pointer field."
type SchemaPointerField implements SchemaField {
    "This is the field name."
    name: String!
    "This is the name of the target class for the field."
    targetClassName: String!
}

"The SchemaPolygonField is used to return information of a Polygon field."
type SchemaPolygonField implements SchemaField {
    "This is the field name."
    name: String!
}

"The SchemaRelationField is used to return information of a Relation field."
type SchemaRelationField implements SchemaField {
    "This is the field name."
    name: String!
    "This is the name of the target class for the field."
    targetClassName: String!
}

"The SchemaStringField is used to return information of a String field."
type SchemaStringField implements SchemaField {
    "This is the field name."
    name: String!
}

type SendVerificationEmailPayload {
    clientMutationId: String
    "It's always true."
    ok: Boolean!
}

type SignUpPayload {
    clientMutationId: String
    "This is the new user that was created, signed up and returned as a viewer."
    viewer: Viewer!
}

type UpdateCardPayload {
    "This is the updated object."
    card: Card!
    clientMutationId: String
}

type UpdateClassPayload {
    "This is the updated class."
    class: Class!
    clientMutationId: String
}

type UpdateRolePayload {
    clientMutationId: String
    "This is the updated object."
    role: Role!
}

type UpdateUserPayload {
    clientMutationId: String
    "This is the updated object."
    user: User!
}

"The User object type is used in operations that involve outputting objects of User class."
type User implements Node & ParseObject {
    ACL: ACL!
    "This is the object authData."
    authData: Object
    "This is the date in which the object was created."
    createdAt: Date!
    "This is the object email."
    email: String
    "This is the object emailVerified."
    emailVerified: Boolean
    "The ID of an object"
    id: ID!
    "This is the object id."
    objectId: ID!
    "This is the date in which the object was las updated."
    updatedAt: Date!
    "This is the object username."
    username: String
}

"Allow to manage users in ACL. If read and write are null the users have read and write rights."
type UserACL {
    "Allow the user to read the current object."
    read: Boolean!
    "ID of the targetted User."
    userId: ID!
    "Allow the user to write on the current object."
    write: Boolean!
}

"A connection to a list of items."
type UserConnection {
    "This is the total matched objecs count that is returned when the count flag is set."
    count: Int!
    "A list of edges."
    edges: [UserEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type UserEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: User
}

"The Viewer object type is used in operations that involve outputting the current user data."
type Viewer {
    "The current user session token."
    sessionToken: String!
    "This is the current user."
    user: User!
}

"The CardOrder input type is used when sorting objects of the Card class."
enum CardOrder {
    ACL_ASC
    ACL_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    image_ASC
    image_DESC
    name_ASC
    name_DESC
    objectId_ASC
    objectId_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"The ReadPreference enum type is used in queries in order to select in which database replica the operation must run."
enum ReadPreference {
    NEAREST
    PRIMARY
    PRIMARY_PREFERRED
    SECONDARY
    SECONDARY_PREFERRED
}

"The RoleOrder input type is used when sorting objects of the Role class."
enum RoleOrder {
    ACL_ASC
    ACL_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    objectId_ASC
    objectId_DESC
    roles_ASC
    roles_DESC
    updatedAt_ASC
    updatedAt_DESC
    users_ASC
    users_DESC
}

"The UserOrder input type is used when sorting objects of the User class."
enum UserOrder {
    ACL_ASC
    ACL_DESC
    authData_ASC
    authData_DESC
    createdAt_ASC
    createdAt_DESC
    emailVerified_ASC
    emailVerified_DESC
    email_ASC
    email_DESC
    id_ASC
    id_DESC
    objectId_ASC
    objectId_DESC
    password_ASC
    password_DESC
    updatedAt_ASC
    updatedAt_DESC
    username_ASC
    username_DESC
}

"The Any scalar type is used in operations and types that involve any type of value."
scalar Any

"The Bytes scalar type is used in operations and types that involve base 64 binary data."
scalar Bytes

"The Date scalar type is used in operations and types that involve dates."
scalar Date

"The File scalar type is used in operations and types that involve files."
scalar File

"The Object scalar type is used in operations and types that involve objects."
scalar Object

"The `Upload` scalar type represents a file upload."
scalar Upload

"Allow to manage access rights. If not provided object will be publicly readable and writable"
input ACLInput {
    "Public access control list."
    public: PublicACLInput
    "Access control list for roles."
    roles: [RoleACLInput!]
    "Access control list for users."
    users: [UserACLInput!]
}

"The ArrayWhereInput input type is used in operations that involve filtering objects by a field of type Array."
input ArrayWhereInput {
    "This is the containedBy operator to specify a constraint to select the objects where the values of an array field is contained by another specified array."
    containedBy: [Any]
    "This is the contains operator to specify a constraint to select the objects where the values of an array field contain all elements of another specified array."
    contains: [Any]
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: Any
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: Any
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: Any
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [Any]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: Any
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: Any
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: Any
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [Any]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
}

"The BooleanWhereInput input type is used in operations that involve filtering objects by a field of type Boolean."
input BooleanWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: Boolean
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: Boolean
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
}

"The BoxInput type is used to specifiy a box operation on a within geo query."
input BoxInput {
    "This is the bottom left coordinates of the box."
    bottomLeft: GeoPointInput!
    "This is the upper right coordinates of the box."
    upperRight: GeoPointInput!
}

"The BytesWhereInput input type is used in operations that involve filtering objects by a field of type Bytes."
input BytesWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: Bytes
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: Bytes
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: Bytes
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [Bytes]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: Bytes
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: Bytes
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: Bytes
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [Bytes]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
}

"Allow to link OR add and link an object of the Card class."
input CardPointerInput {
    "Create and link an object from Card class."
    createAndLink: CreateCardFieldsInput
    "Link an existing object from Card class. You can use either the global or the object id."
    link: ID
}

"Allow to add, remove, createAndAdd objects of the Card class into a relation field."
input CardRelationInput {
    "Add existing objects from the Card class into the relation. You can use either the global or the object ids."
    add: [ID!]
    "Create and add objects of the Card class into the relation."
    createAndAdd: [CreateCardFieldsInput!]
    "Remove existing objects from the Card class out of the relation. You can use either the global or the object ids."
    remove: [ID!]
}

"The CardRelationWhereInput input type is used in operations that involve filtering objects of Card class."
input CardRelationWhereInput {
    "Check if the relation/pointer contains objects."
    exists: Boolean
    "Run a relational/pointer query where at least one child object can match."
    have: CardWhereInput
    "Run an inverted relational/pointer query where at least one child object can match."
    haveNot: CardWhereInput
}

"The CardWhereInput input type is used in operations that involve filtering objects of Card class."
input CardWhereInput {
    "This is the object ACL."
    ACL: ObjectWhereInput
    "This is the AND operator to compound constraints."
    AND: [CardWhereInput!]
    "This is the NOR operator to compound constraints."
    NOR: [CardWhereInput!]
    "This is the OR operator to compound constraints."
    OR: [CardWhereInput!]
    "This is the object createdAt."
    createdAt: DateWhereInput
    "This is the object id."
    id: IdWhereInput
    "This is the object image."
    image: FileWhereInput
    "This is the object name."
    name: StringWhereInput
    "This is the object objectId."
    objectId: IdWhereInput
    "This is the object updatedAt."
    updatedAt: DateWhereInput
}

"The CenterSphereInput type is used to specifiy a centerSphere operation on a geoWithin query."
input CenterSphereInput {
    "This is the center of the sphere."
    center: GeoPointInput!
    "This is the radius of the sphere."
    distance: Float!
}

"The CreateCardFieldsInput input type is used in operations that involve creation of objects in the Card class."
input CreateCardFieldsInput {
    ACL: ACLInput
    "This is the object image."
    image: FileInput!
    "This is the object name."
    name: String!
}

input CreateCardInput {
    clientMutationId: String
    "These are the fields that will be used to create the new object."
    fields: CreateCardFieldsInput
}

input CreateClassInput {
    clientMutationId: String
    "This is the name of the object class."
    name: String!
    "These are the schema's fields of the object class."
    schemaFields: SchemaFieldsInput
}

input CreateFileInput {
    clientMutationId: String
    "This is the new file to be created and uploaded."
    upload: Upload!
}

"The CreateRoleFieldsInput input type is used in operations that involve creation of objects in the Role class."
input CreateRoleFieldsInput {
    ACL: ACLInput
    "This is the object name."
    name: String
    "This is the object roles."
    roles: RoleRelationInput
    "This is the object users."
    users: UserRelationInput
}

input CreateRoleInput {
    clientMutationId: String
    "These are the fields that will be used to create the new object."
    fields: CreateRoleFieldsInput
}

"The CreateUserFieldsInput input type is used in operations that involve creation of objects in the User class."
input CreateUserFieldsInput {
    ACL: ACLInput
    "This is the object authData."
    authData: Object
    "This is the object email."
    email: String
    "This is the object emailVerified."
    emailVerified: Boolean
    "This is the object password."
    password: String!
    "This is the object username."
    username: String!
}

input CreateUserInput {
    clientMutationId: String
    "These are the fields that will be used to create the new object."
    fields: CreateUserFieldsInput
}

"The DateWhereInput input type is used in operations that involve filtering objects by a field of type Date."
input DateWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: Date
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: Date
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: Date
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [Date]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: Date
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: Date
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: Date
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [Date]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
}

input DeleteCardInput {
    clientMutationId: String
    "This is the object id. You can use either the global or the object id."
    id: ID!
}

input DeleteClassInput {
    clientMutationId: String
    "This is the name of the object class."
    name: String!
}

input DeleteRoleInput {
    clientMutationId: String
    "This is the object id. You can use either the global or the object id."
    id: ID!
}

input DeleteUserInput {
    clientMutationId: String
    "This is the object id. You can use either the global or the object id."
    id: ID!
}

input FileInput {
    "A File Scalar can be an url or a FileInfo object. If this field is set to null the file will be unlinked."
    file: File
    "Use this field if you want to unlink the file (the file will not be deleted on cloud storage)"
    unlink: Boolean
    "Use this field if you want to create a new file."
    upload: Upload
}

"The FileWhereInput input type is used in operations that involve filtering objects by a field of type File."
input FileWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: File
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: File
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: File
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [File]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: File
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: File
    "This is the matchesRegex operator to specify a constraint to select the objects where the value of a field matches a specified regular expression."
    matchesRegex: String
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: File
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [File]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
    "This is the options operator to specify optional flags (such as \"i\" and \"m\") to be added to a matchesRegex operation in the same set of constraints."
    options: String
}

"The GeoIntersectsInput type is used to specify a geoIntersects operation on a constraint."
input GeoIntersectsInput {
    "This is the point to be specified."
    point: GeoPointInput
}

"The GeoPointInput type is used in operations that involve inputting fields of type geo point."
input GeoPointInput {
    "This is the latitude."
    latitude: Float!
    "This is the longitude."
    longitude: Float!
}

"The GeoPointWhereInput input type is used in operations that involve filtering objects by a field of type GeoPoint."
input GeoPointWhereInput {
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the geoWithin operator to specify a constraint to select the objects where the values of a geo point field is within a specified polygon or sphere."
    geoWithin: GeoWithinInput
    "This is the maxDistance operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in radians) from the geo point specified in the $nearSphere operator."
    maxDistance: Float
    "This is the maxDistanceInKilometers operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in kilometers) from the geo point specified in the $nearSphere operator."
    maxDistanceInKilometers: Float
    "This is the maxDistanceInMiles operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in miles) from the geo point specified in the $nearSphere operator."
    maxDistanceInMiles: Float
    "This is the maxDistanceInRadians operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in radians) from the geo point specified in the $nearSphere operator."
    maxDistanceInRadians: Float
    "This is the nearSphere operator to specify a constraint to select the objects where the values of a geo point field is near to another geo point."
    nearSphere: GeoPointInput
    "This is the within operator to specify a constraint to select the objects where the values of a geo point field is within a specified box."
    within: WithinInput
}

"The GeoWithinInput type is used to specify a geoWithin operation on a constraint."
input GeoWithinInput {
    "This is the sphere to be specified."
    centerSphere: CenterSphereInput
    "This is the polygon to be specified."
    polygon: [GeoPointInput!]
}

"The IdWhereInput input type is used in operations that involve filtering objects by an id."
input IdWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: ID
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: ID
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: ID
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [ID]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: ID
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: ID
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: ID
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [ID]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
}

"An entry from an object, i.e., a pair of key and value."
input KeyValueInput {
    "The key used to retrieve the value of this entry."
    key: String!
    "The value of the entry. Could be any type of scalar data."
    value: Any!
}

input LogInInput {
    clientMutationId: String
    "This is the password used to log in the user."
    password: String!
    "This is the username used to log in the user."
    username: String!
}

input LogInWithInput {
    authData: Object!
    clientMutationId: String
    fields: UserLoginWithInput
}

input LogOutInput {
    clientMutationId: String
}

"The NumberWhereInput input type is used in operations that involve filtering objects by a field of type Number."
input NumberWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: Float
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: Float
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: Float
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [Float]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: Float
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: Float
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: Float
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [Float]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
}

"The ObjectWhereInput input type is used in operations that involve filtering result by a field of type Object."
input ObjectWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: KeyValueInput
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: KeyValueInput
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: KeyValueInput
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [KeyValueInput]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: KeyValueInput
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: KeyValueInput
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: KeyValueInput
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [KeyValueInput]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
}

"The PointerFieldInput is used to specify a field of type pointer for an object class schema."
input PointerFieldInput {
    "This is the field name."
    name: String!
    "This is the name of the target class for the field."
    targetClassName: String!
}

"The PolygonWhereInput input type is used in operations that involve filtering objects by a field of type Polygon."
input PolygonWhereInput {
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the geoIntersects operator to specify a constraint to select the objects where the values of a polygon field intersect a specified point."
    geoIntersects: GeoIntersectsInput
}

"Allow to manage public rights."
input PublicACLInput {
    "Allow anyone to read the current object."
    read: Boolean!
    "Allow anyone to write on the current object."
    write: Boolean!
}

"The ReadOptionsInputt type is used in queries in order to set the read preferences."
input ReadOptionsInput {
    "The read preference for the queries to be executed to include fields."
    includeReadPreference: ReadPreference
    "The read preference for the main query to be executed."
    readPreference: ReadPreference
    "The read preference for the subqueries that may be required."
    subqueryReadPreference: ReadPreference
}

"The RelationFieldInput is used to specify a field of type relation for an object class schema."
input RelationFieldInput {
    "This is the field name."
    name: String!
    "This is the name of the target class for the field."
    targetClassName: String!
}

input ResetPasswordInput {
    clientMutationId: String
    email: String!
}

"Allow to manage roles in ACL."
input RoleACLInput {
    "Allow users who are members of the role to read the current object."
    read: Boolean!
    "Name of the targetted Role."
    roleName: String!
    "Allow users who are members of the role to write on the current object."
    write: Boolean!
}

"Allow to link OR add and link an object of the Role class."
input RolePointerInput {
    "Create and link an object from Role class."
    createAndLink: CreateRoleFieldsInput
    "Link an existing object from Role class. You can use either the global or the object id."
    link: ID
}

"Allow to add, remove, createAndAdd objects of the Role class into a relation field."
input RoleRelationInput {
    "Add existing objects from the Role class into the relation. You can use either the global or the object ids."
    add: [ID!]
    "Create and add objects of the Role class into the relation."
    createAndAdd: [CreateRoleFieldsInput!]
    "Remove existing objects from the Role class out of the relation. You can use either the global or the object ids."
    remove: [ID!]
}

"The RoleRelationWhereInput input type is used in operations that involve filtering objects of Role class."
input RoleRelationWhereInput {
    "Check if the relation/pointer contains objects."
    exists: Boolean
    "Run a relational/pointer query where at least one child object can match."
    have: RoleWhereInput
    "Run an inverted relational/pointer query where at least one child object can match."
    haveNot: RoleWhereInput
}

"The RoleWhereInput input type is used in operations that involve filtering objects of Role class."
input RoleWhereInput {
    "This is the object ACL."
    ACL: ObjectWhereInput
    "This is the AND operator to compound constraints."
    AND: [RoleWhereInput!]
    "This is the NOR operator to compound constraints."
    NOR: [RoleWhereInput!]
    "This is the OR operator to compound constraints."
    OR: [RoleWhereInput!]
    "This is the object createdAt."
    createdAt: DateWhereInput
    "This is the object id."
    id: IdWhereInput
    "This is the object name."
    name: StringWhereInput
    "This is the object objectId."
    objectId: IdWhereInput
    "This is the object roles."
    roles: RoleRelationWhereInput
    "This is the object updatedAt."
    updatedAt: DateWhereInput
    "This is the object users."
    users: UserRelationWhereInput
}

"The SchemaArrayFieldInput is used to specify a field of type array for an object class schema."
input SchemaArrayFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaBooleanFieldInput is used to specify a field of type boolean for an object class schema."
input SchemaBooleanFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaBytesFieldInput is used to specify a field of type bytes for an object class schema."
input SchemaBytesFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaDateFieldInput is used to specify a field of type date for an object class schema."
input SchemaDateFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaFieldInput is used to specify a field of an object class schema."
input SchemaFieldInput {
    "This is the field name."
    name: String!
}

"The CreateClassSchemaInput type is used to specify the schema for a new object class to be created."
input SchemaFieldsInput {
    "These are the Array fields to be added to the class schema."
    addArrays: [SchemaArrayFieldInput!]
    "These are the Boolean fields to be added to the class schema."
    addBooleans: [SchemaBooleanFieldInput!]
    "These are the Bytes fields to be added to the class schema."
    addBytes: [SchemaBytesFieldInput!]
    "These are the Date fields to be added to the class schema."
    addDates: [SchemaDateFieldInput!]
    "These are the File fields to be added to the class schema."
    addFiles: [SchemaFileFieldInput!]
    "This is the Geo Point field to be added to the class schema. Currently it is supported only one GeoPoint field per Class."
    addGeoPoint: SchemaGeoPointFieldInput
    "These are the Number fields to be added to the class schema."
    addNumbers: [SchemaNumberFieldInput!]
    "These are the Object fields to be added to the class schema."
    addObjects: [SchemaObjectFieldInput!]
    "These are the Pointer fields to be added to the class schema."
    addPointers: [PointerFieldInput!]
    "These are the Polygon fields to be added to the class schema."
    addPolygons: [SchemaPolygonFieldInput!]
    "These are the Relation fields to be added to the class schema."
    addRelations: [RelationFieldInput!]
    "These are the String fields to be added to the class schema."
    addStrings: [SchemaStringFieldInput!]
    "These are the fields to be removed from the class schema."
    remove: [SchemaFieldInput!]
}

"The SchemaFileFieldInput is used to specify a field of type file for an object class schema."
input SchemaFileFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaGeoPointFieldInput is used to specify a field of type geo point for an object class schema."
input SchemaGeoPointFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaNumberFieldInput is used to specify a field of type number for an object class schema."
input SchemaNumberFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaObjectFieldInput is used to specify a field of type object for an object class schema."
input SchemaObjectFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaPolygonFieldInput is used to specify a field of type polygon for an object class schema."
input SchemaPolygonFieldInput {
    "This is the field name."
    name: String!
}

"The SchemaStringFieldInput is used to specify a field of type string for an object class schema."
input SchemaStringFieldInput {
    "This is the field name."
    name: String!
}

"The SearchInput type is used to specifiy a search operation on a full text search."
input SearchInput {
    "This is the flag to enable or disable case sensitive search."
    caseSensitive: Boolean
    "This is the flag to enable or disable diacritic sensitive search."
    diacriticSensitive: Boolean
    "This is the language to tetermine the list of stop words and the rules for tokenizer."
    language: String
    "This is the term to be searched."
    term: String!
}

"The SelectInput type is used to specify an inQueryKey or a notInQueryKey operation on a constraint."
input SelectInput {
    "This is the key in the result of the subquery that must match (not match) the field."
    key: String!
    "This is the subquery to be executed."
    query: SubqueryInput!
}

input SendVerificationEmailInput {
    clientMutationId: String
    email: String!
}

input SignUpInput {
    clientMutationId: String
    fields: CreateUserFieldsInput
}

"The StringWhereInput input type is used in operations that involve filtering objects by a field of type String."
input StringWhereInput {
    "This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value."
    equalTo: String
    "This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist)."
    exists: Boolean
    "This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value."
    greaterThan: String
    "This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value."
    greaterThanOrEqualTo: String
    "This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array."
    in: [String]
    "This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query."
    inQueryKey: SelectInput
    "This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value."
    lessThan: String
    "This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value."
    lessThanOrEqualTo: String
    "This is the matchesRegex operator to specify a constraint to select the objects where the value of a field matches a specified regular expression."
    matchesRegex: String
    "This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value."
    notEqualTo: String
    "This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array."
    notIn: [String]
    "This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query."
    notInQueryKey: SelectInput
    "This is the options operator to specify optional flags (such as \"i\" and \"m\") to be added to a matchesRegex operation in the same set of constraints."
    options: String
    "This is the $text operator to specify a full text search constraint."
    text: TextInput
}

"The SubqueryInput type is used to specify a sub query to another class."
input SubqueryInput {
    "This is the class name of the object."
    className: String!
    "These are the conditions that the objects need to match in order to be found"
    where: Object!
}

"The TextInput type is used to specify a text operation on a constraint."
input TextInput {
    "This is the search to be executed."
    search: SearchInput!
}

"The UpdateCardFieldsInput input type is used in operations that involve creation of objects in the Card class."
input UpdateCardFieldsInput {
    ACL: ACLInput
    "This is the object image."
    image: FileInput
    "This is the object name."
    name: String
}

input UpdateCardInput {
    clientMutationId: String
    "These are the fields that will be used to update the object."
    fields: UpdateCardFieldsInput
    "This is the object id. You can use either the global or the object id."
    id: ID!
}

input UpdateClassInput {
    clientMutationId: String
    "This is the name of the object class."
    name: String!
    "These are the schema's fields of the object class."
    schemaFields: SchemaFieldsInput
}

"The UpdateRoleFieldsInput input type is used in operations that involve creation of objects in the Role class."
input UpdateRoleFieldsInput {
    ACL: ACLInput
    "This is the object name."
    name: String
    "This is the object roles."
    roles: RoleRelationInput
    "This is the object users."
    users: UserRelationInput
}

input UpdateRoleInput {
    clientMutationId: String
    "These are the fields that will be used to update the object."
    fields: UpdateRoleFieldsInput
    "This is the object id. You can use either the global or the object id."
    id: ID!
}

"The UpdateUserFieldsInput input type is used in operations that involve creation of objects in the User class."
input UpdateUserFieldsInput {
    ACL: ACLInput
    "This is the object authData."
    authData: Object
    "This is the object email."
    email: String
    "This is the object emailVerified."
    emailVerified: Boolean
    "This is the object password."
    password: String
    "This is the object username."
    username: String
}

input UpdateUserInput {
    clientMutationId: String
    "These are the fields that will be used to update the object."
    fields: UpdateUserFieldsInput
    "This is the object id. You can use either the global or the object id."
    id: ID!
}

"Allow to manage users in ACL."
input UserACLInput {
    "Allow the user to read the current object."
    read: Boolean!
    "ID of the targetted User."
    userId: ID!
    "Allow the user to write on the current object."
    write: Boolean!
}

input UserLoginWithInput {
    ACL: ACLInput
    "This is the object email."
    email: String
    "This is the object emailVerified."
    emailVerified: Boolean
}

"Allow to link OR add and link an object of the User class."
input UserPointerInput {
    "Create and link an object from User class."
    createAndLink: CreateUserFieldsInput
    "Link an existing object from User class. You can use either the global or the object id."
    link: ID
}

"Allow to add, remove, createAndAdd objects of the User class into a relation field."
input UserRelationInput {
    "Add existing objects from the User class into the relation. You can use either the global or the object ids."
    add: [ID!]
    "Create and add objects of the User class into the relation."
    createAndAdd: [CreateUserFieldsInput!]
    "Remove existing objects from the User class out of the relation. You can use either the global or the object ids."
    remove: [ID!]
}

"The UserRelationWhereInput input type is used in operations that involve filtering objects of User class."
input UserRelationWhereInput {
    "Check if the relation/pointer contains objects."
    exists: Boolean
    "Run a relational/pointer query where at least one child object can match."
    have: UserWhereInput
    "Run an inverted relational/pointer query where at least one child object can match."
    haveNot: UserWhereInput
}

"The UserWhereInput input type is used in operations that involve filtering objects of User class."
input UserWhereInput {
    "This is the object ACL."
    ACL: ObjectWhereInput
    "This is the AND operator to compound constraints."
    AND: [UserWhereInput!]
    "This is the NOR operator to compound constraints."
    NOR: [UserWhereInput!]
    "This is the OR operator to compound constraints."
    OR: [UserWhereInput!]
    "This is the object authData."
    authData: ObjectWhereInput
    "This is the object createdAt."
    createdAt: DateWhereInput
    "This is the object email."
    email: StringWhereInput
    "This is the object emailVerified."
    emailVerified: BooleanWhereInput
    "This is the object id."
    id: IdWhereInput
    "This is the object objectId."
    objectId: IdWhereInput
    "This is the object password."
    password: StringWhereInput
    "This is the object updatedAt."
    updatedAt: DateWhereInput
    "This is the object username."
    username: StringWhereInput
}

"The WithinInput type is used to specify a within operation on a constraint."
input WithinInput {
    "This is the box to be specified."
    box: BoxInput!
}
